{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/ServiceWorker.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","yServiceWorker","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","extend","Y","YServiceWorker","_Y$AbstractConnector","y","options","_classCallCheck","undefined","room","role","preferUntransformed","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","debug","db","stopGarbageCollector","guid","utils","generateGuid","setNewServiceWorker","sw","serviceworker","messageChannel","MessageChannel","port1","onmessage","messageEventListener","postMessage","type","auth","port2","userJoined","navigator","serviceWorker","ready","then","registration","controller","active","whenSynced","setUserId","addEventListener","userLeft","event","data","receiveMessage","message","_inherits","_createClass","key","value","removeEventListener","uid","broadcast","_get","prototype","AbstractConnector"],"mappings":"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","file":"y-serviceworker.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y, MessageChannel */\n'use strict'\n\nfunction extend (Y) {\n  class YServiceWorker extends Y.AbstractConnector {\n    constructor (y, options) {\n      if (options === undefined) {\n        throw new Error('Options must not be undefined!')\n      }\n      if (options.room == null) {\n        throw new Error('You must define a room name!')\n      }\n\n      options.role = 'slave'\n      options.preferUntransformed = true\n      super(y, options)\n      this.debug = Y.debug('y:service-worker')\n\n      this.y.db.stopGarbageCollector()\n      this.options = options\n      this.guid = Y.utils.generateGuid() // we send this unique id with every postMessage. Later it becomes the userId\n      var self = this\n      var setNewServiceWorker = function (sw) {\n        self.serviceworker = sw\n        var messageChannel = new MessageChannel()\n        messageChannel.port1.onmessage = self.messageEventListener\n        self.serviceworker.postMessage({\n          type: 'join',\n          room: options.room,\n          auth: options.auth,\n          guid: self.guid\n        }, [messageChannel.port2])\n        self.userJoined('serviceworker', 'master')\n      }\n      navigator.serviceWorker.ready.then(function (registration) {\n        setNewServiceWorker(registration.controller || registration.active)\n        self.whenSynced(function () {\n          self.setUserId(self.guid)\n        })\n        navigator.serviceWorker.addEventListener('controllerchange', function () {\n          self.debug('controllerchanged')\n          var sw = navigator.serviceWorker.controller\n          if (self.serviceworker !== sw && sw !== null) {\n            self.debug('replace old sw')\n            self.userLeft('serviceworker')\n            setNewServiceWorker(sw)\n          }\n        })\n      })\n\n      this.messageEventListener = function (event) {\n        if (event.data.room === options.room && (event.data.guid == null || event.data.guid === self.guid)) {\n          if (event.data.type === 'message') {\n            self.receiveMessage('serviceworker', event.data.message)\n          }\n        }\n      }\n      navigator.serviceWorker.addEventListener('message', this.messageEventListener)\n    }\n    destroy () {\n      navigator.serviceWorker.removeEventListener('message', this.messageEventListener)\n      this.userLeft('serviceworker')\n      this.serviceworker.postMessage({\n        type: 'leave',\n        room: this.options.room,\n        guid: this.guid\n      })\n    }\n    disconnect () {\n      // do nothing\n    }\n    reconnect () {\n      // do nothing\n    }\n    send (uid, message) {\n      this.broadcast(message)\n      super.send(uid, message)\n    }\n    broadcast (message) {\n      this.serviceworker.postMessage({\n        type: 'message',\n        room: this.options.room,\n        message: message,\n        guid: this.guid\n      })\n      super.broadcast(message)\n    }\n    isDisconnected () {\n      return false\n    }\n  }\n  Y.extend('serviceworker', YServiceWorker)\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n"]}