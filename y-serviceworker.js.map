{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/ServiceWorker.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","yServiceWorker","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","extend","Y","YServiceWorker","_Y$AbstractConnector","y","options","_classCallCheck","undefined","room","role","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","db","stopGarbageCollector","guid","utils","generateGuid","setNewServiceWorker","sw","serviceworker","messageChannel","MessageChannel","port1","onmessage","messageEventListener","postMessage","type","auth","port2","userJoined","navigator","serviceWorker","ready","then","registration","controller","active","whenSynced","setUserId","addEventListener","console","log","userLeft","event","data","receiveMessage","message","_inherits","_createClass","key","value","removeEventListener","uid","broadcast","AbstractConnector"],"mappings":"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","file":"y-serviceworker.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y, MessageChannel */\n'use strict'\n\nfunction extend (Y) {\n  class YServiceWorker extends Y.AbstractConnector {\n    constructor (y, options) {\n      if (options === undefined) {\n        throw new Error('Options must not be undefined!')\n      }\n      if (options.room == null) {\n        throw new Error('You must define a room name!')\n      }\n\n      options.role = 'slave'\n      super(y, options)\n      this.y.db.stopGarbageCollector()\n      this.options = options\n      this.guid = Y.utils.generateGuid() // we send this unique id with every postMessage. Later it becomes the userId\n      var self = this\n      var setNewServiceWorker = function (sw) {\n        self.serviceworker = sw\n        var messageChannel = new MessageChannel()\n        messageChannel.port1.onmessage = self.messageEventListener\n        self.serviceworker.postMessage({\n          type: 'join',\n          room: options.room,\n          auth: options.auth,\n          guid: self.guid\n        }, [messageChannel.port2])\n        self.userJoined('serviceworker', 'master')\n      }\n      navigator.serviceWorker.ready.then(function (registration) {\n        setNewServiceWorker(registration.controller || registration.active)\n        self.whenSynced(function () {\n          self.setUserId(self.guid)\n        })\n        navigator.serviceWorker.addEventListener('controllerchange', function () {\n          console.log('controllerchanged')\n          var sw = navigator.serviceWorker.controller\n          if (self.serviceworker !== sw && sw !== null) {\n            console.log('replace old sw')\n            self.userLeft('serviceworker')\n            setNewServiceWorker(sw)\n          }\n        })\n      })\n\n      this.messageEventListener = function (event) {\n        if (event.data.room === options.room && (event.data.guid == null || event.data.guid === self.guid)) {\n          if (event.data.type === 'message') {\n            self.receiveMessage('serviceworker', event.data.message)\n          }\n        }\n      }\n      navigator.serviceWorker.addEventListener('message', this.messageEventListener)\n    }\n    destroy () {\n      navigator.serviceWorker.removeEventListener('message', this.messageEventListener)\n      this.userLeft('serviceworker')\n      this.serviceworker.postMessage({\n        type: 'leave',\n        room: this.options.room,\n        guid: this.guid\n      })\n    }\n    disconnect () {\n      // do nothing\n    }\n    reconnect () {\n      // do nothing\n    }\n    send (uid, message) {\n      this.broadcast(message)\n    }\n    broadcast (message) {\n      this.serviceworker.postMessage({\n        type: 'message',\n        room: this.options.room,\n        message: message,\n        guid: this.guid\n      })\n    }\n    isDisconnected () {\n      return false\n    }\n  }\n  Y.extend('serviceworker', YServiceWorker)\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n"],"sourceRoot":"/source/"}